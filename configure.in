dnl Taylor UUCP configuration file
dnl This should be processed with autoconf to produce a configure script.
dnl Copyright (c) 1992 Ian Lance Taylor
dnl
AC_INIT(policy.h)
AC_PREFIX(gcc)
AC_HEADER_FILE(conf.h)
AC_PROG_GCC
AC_PROG_CPP
AC_GCC_TRADITIONAL
AC_PROG_INSTALL
dnl
CFLAGS=${CFLAGS--g}
AC_SUBST(CFLAGS)dnl
AC_SUBST(LDFLAGS)dnl
AC_PROG_RANLIB
dnl
echo checking for mail program
if test -s /usr/ucb/mail; then
 AC_DEFINE([MAIL_PROGRAM], `echo '"/usr/ucb/mail"'`)
elif test -s /bin/mail; then
 AC_DEFINE([MAIL_PROGRAM], `echo '"/bin/mail"'`)
fi
echo checking for echo program
if test -s /bin/echo; then
 AC_DEFINE([ECHO_PROGRAM], `echo '"/bin/echo"'`)
fi
AC_LN_S
dnl
AC_HAVE_HEADERS(stddef.h string.h strings.h unistd.h stdlib.h limits.h)
AC_HAVE_HEADERS(time.h sys/wait.h sys/ioctl.h dirent.h memory.h sys/param.h)
AC_HAVE_HEADERS(utime.h fcntl.h sys/file.h sys/times.h libc.h sysexits.h)
AC_HAVE_HEADERS(poll.h stropts.h ftw.h sys/select.h)
dnl
AC_MAJOR_HEADER
dnl
AC_RETSIGTYPE
dnl
AC_LIBTHING_CHECK([time.h and sys/time.h being included together],
[#include <sys/time.h>
#include <time.h>],
[int i;],
AC_DEFINE([HAVE_SYS_TIME_AND_TIME_H]),
:)
dnl
AC_LIBTHING_CHECK([termios.h and sys/ioctl.h being included together],
[#include <termios.h>
#include <sys/ioctl.h>],
[int i;],
AC_DEFINE([HAVE_TERMIOS_AND_SYS_IOCTL_H]),
:)
dnl
AC_LIBTHING_CHECK([CBREAK],
[#include <sgtty.h>], [int i = CBREAK;],
AC_DEFINE([HAVE_CBREAK]),
:)
dnl
AC_LIBTHING_CHECK([pid_t in sys/types.h],
[#include <sys/types.h>], [pid_t x;],
:,
AC_DEFINE(PID_T, int))
dnl
AC_LIBTHING_CHECK([uid_t in sys/types.h],
[#include <sys/types.h>], [uid_t x;],
:,
AC_DEFINE(UID_T, int))
dnl
AC_LIBTHING_CHECK([gid_t in sys/types.h],
[#include <sys/types.h>], [gid_t x;],
:,
AC_DEFINE(GID_T, int))
dnl
AC_LIBTHING_CHECK([off_t in sys/types.h],
[#include <sys/types.h>], [off_t x;],
:,
AC_DEFINE(OFF_T, long))
dnl
dnl On SCO 3.2.2 sig_atomic_t is in <sys/types.h> but not <signal.h>.
AC_LIBTHING_CHECK([sig_atomic_t in signal.h],
[#include <signal.h>], [sig_atomic_t x;],
AC_DEFINE([HAVE_SIG_ATOMIC_T_IN_SIGNAL_H]),
:)
dnl
AC_LIBTHING_CHECK([sig_atomic_t in sys/types.h],
[#include <sys/types.h>], [sig_atomic_t x;],
AC_DEFINE([HAVE_SIG_ATOMIC_T_IN_TYPES_H]),
:)
dnl
case $DEFS in
*HAVE_STDDEF_H*)
  AC_LIBTHING_CHECK([size_t in stddef.h],
  [#include <stddef.h>], [size_t x;],
  AC_DEFINE([HAVE_SIZE_T_IN_STDDEF_H]),
  :) ;;
esac
dnl
AC_LIBTHING_CHECK([size_t in sys/types.h],
[#include <sys/types.h>], [size_t x;],
AC_DEFINE([HAVE_SIZE_T_IN_TYPES_H]),
:)
dnl
AC_LIBTHING_CHECK([time_t in time.h],
[#include <time.h>], [time_t i;],
AC_DEFINE([HAVE_TIME_T_IN_TIME_H]),
:)
dnl
AC_LIBTHING_CHECK([time_t in sys/types.h],
[#include <sys/types.h>], [time_t i;],
AC_DEFINE([HAVE_TIME_T_IN_TYPES_H]),
:)
dnl
dnl The filesystem info code is from David MacKenzie's fileutils 3.1
dnl package.
echo checking how to get filesystem info
if test -f $INCLUDEDIR/sys/statvfs.h -a -f $INCLUDEDIR/sys/fstyp.h; then
  AC_DEFINE(FS_STATVFS)
elif test -f $INCLUDEDIR/sys/statfs.h -a -f $INCLUDEDIR/sys/fstyp.h; then
  AC_DEFINE(FS_USG_STATFS)
elif test -f $INCLUDEDIR/mntent.h; then
  AC_DEFINE(FS_MNTENT)
elif test -f $INCLUDEDIR/sys/mount.h -a -f $INCLUDEDIR/sys/fs_types.h; then
  AC_DEFINE(FS_GETMNT)
elif grep MOUNT_UFS $INCLUDEDIR/sys/mount.h >/dev/null 2>&1; then
  AC_DEFINE(FS_STATFS)
else
  AC_LIBTHING_CHECK([ustat], , [ustat();], AC_DEFINE(FS_USTAT), :)
fi
dnl
AC_LIBTHING_CHECK([void],
[], [extern void foo (); (void) exit (0);],
AC_DEFINE([HAVE_VOID]),
:)
dnl
AC_LIBTHING_CHECK([unsigned char],
[], [unsigned char i = (unsigned char) -1;],
AC_DEFINE([HAVE_UNSIGNED_CHAR]),
:)
dnl
AC_LIBTHING_CHECK([errno],
[#include <errno.h>], [int i = errno; errno = 1;],
AC_DEFINE([HAVE_ERRNO_DECLARATION]),
:)
dnl
echo checking for combined use of O_NONBLOCK and O_NDELAY
AC_TEST_PROGRAM([
#include <fcntl.h>
#ifndef O_NDELAY
#ifdef FNDELAY
#define O_NDELAY FNDELAY
#else
#define O_NDELAY 0
#endif
#endif
#ifndef O_NONBLOCK
#ifdef FNBLOCK
#define O_NONBLOCK FNBLOCK
#else
#define O_NONBLOCK 0
#endif
#endif
main () { exit (fcntl (open ("conftest.c", O_RDONLY),
		       F_SETFL,
		       O_NONBLOCK | O_NDELAY)); }
],
AC_DEFINE(COMBINED_UNBLOCK),
true)
dnl
AC_ALLOCA
dnl
undefine([index])
AC_HAVE_FUNCS(memset memcmp memchr memcpy bcopy bcmp bzero)
dnl
dnl Check for the SCO buggy memmove.  This test case is from Chip
dnl Salzenberg.  The test case must be run with cc without optimization.
AC_FUNC_CHECK(memmove,
[SAVECC=$CC; CC=cc
AC_TEST_PROGRAM([
main()
  {
     register int x1, x2, x3;
     char s[2];

     x1 = 1;
     x2 = 2;
     x3 = 3;
     memmove(s, "", 1);
     exit((x1 != 1) || (x2 != 2) || (x3 != 3));
  }
],
AC_DEFINE(HAVE_MEMMOVE),
echo 1>&2 "Your memmove seems to be buggy")
CC=$SAVECC],
:)
dnl
AC_HAVE_FUNCS(strchr strrchr index rindex strerror strtol strstr)
AC_HAVE_FUNCS(strdup strcasecmp strncasecmp stricmp strlwr bsearch vfprintf)
AC_HAVE_FUNCS(remove ftruncate ltrunc rename opendir dup2 waitpid wait4)
AC_HAVE_FUNCS(sigsetjmp setret)
AC_HAVE_FUNCS(sigaction sigvec sigset)
AC_HAVE_FUNCS(sigprocmask sigblock sighold)
AC_HAVE_FUNCS(getdtablesize sysconf)
AC_HAVE_FUNCS(setpgrp setsid)
AC_HAVE_FUNCS(gethostname uname)
AC_HAVE_FUNCS(gettimeofday)
AC_HAVE_FUNCS(ftw getline)
dnl Check for the SCO buggy ftime
AC_FUNC_CHECK(ftime,
[AC_TEST_PROGRAM([
#include <sys/types.h>
#include <sys/timeb.h>
main ()
{
  struct timeb s, slast;
  int c = 0;
  ftime (&slast);
  while (c < 10)
    {
      ftime (&s);
      if (s.time < slast.time
	  || (s.time == slast.time && s.millitm < slast.millitm))
	exit (1);
      if (s.time != slast.time)
	++c;
      slast.time = s.time;
      slast.millitm = s.millitm;
    }
  exit (0);
}
],
AC_DEFINE(HAVE_FTIME),
echo 1>&2 "Your ftime seems to be buggy")],
:)
dnl
AC_HAVE_FUNCS(times)
AC_HAVE_FUNCS(napms nap usleep poll select)
case $DEFS in
*HAVE_NAPMS*) ;;
*HAVE_NAP*)  ;;
*HAVE_USLEEP*) ;;
*HAVE_POLL*) ;;
*HAVE_SELECT*) ;;
*) echo 1>&2 'WARNING: No way to sleep for less than one second'
   echo 1>&2 '         \p in chat scripts will sleep for a full second'
   ;;
esac
dnl
AC_HAVE_FUNCS(getgrent)
AC_HAVE_FUNCS(socket)
dnl
AC_HAVE_FUNCS(getcwd getwd)
case $DEFS in
*HAVE_GETCWD*) ;;
*HAVE_GETCD*) ;;
*) if test -s /bin/pwd; then
     AC_DEFINE([PWD_PROGRAM], `echo '"/bin/pwd"'`)
   fi ;;
esac
dnl
AC_HAVE_FUNCS(mkdir)
case $DEFS in
*HAVE_MKDIR*) UUDIR='# ' ;;
*) UUDIR=
   if test -s /bin/mkdir; then
     AC_DEFINE([MKDIR_PROGRAM], `echo '"/bin/mkdir"'`)
   fi ;;
esac
AC_SUBST(UUDIR)dnl
dnl
AC_HAVE_FUNCS(rmdir)
case $DEFS in
*HAVE_RMDIR*) ;;
*) if test -s /bin/rmdir; then
     AC_DEFINE([RMDIR_PROGRAM], `echo '"/bin/rmdir"'`)
   fi ;;
esac
dnl
case $DEFS in
*HAVE_SIGVEC*)
  AC_LIBTHING_CHECK([sv_flags],
  [#include <signal.h>], [struct sigvec s; s.sv_flags = 0;],
  AC_DEFINE([HAVE_SIGVEC_SV_FLAGS]), :) ;;
esac
dnl
AC_LIBTHING_CHECK([times declared as long],
[#include <sys/types.h>
#ifdef HAVE_LIBC_H
#include <libc.h>
#endif
#ifdef HAVE_SYS_TIMES_H
#include <sys/times.h>
#endif
extern long times ();],
[],
AC_DEFINE([TIMES_DECLARATION_OK]),
:)
dnl
AC_LIBTHING_CHECK([BSD setpgrp],
[#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif],
[getpgrp (0); setpgrp (0, 0);],
AC_DEFINE([HAVE_BSD_PGRP]),
:)
dnl
AC_LIBTHING_CHECK([union wait],
[#include <sys/wait.h>
#ifndef WIFEXITED
#define WIFEXITED(u) ((u).w_termsig == 0)
#endif],
[union wait u; if (WIFEXITED (u)) wait (&u);],
AC_DEFINE([HAVE_UNION_WAIT]),
:)
dnl
AC_UTIME_NULL
AC_LONG_FILENAMES
AC_RESTARTABLE_SYSCALLS
dnl
AC_OUTPUT(Makefile)
